<?php

namespace bestophe\VideoCollectionBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Gedmo\Translatable\TranslatableListener;
use Doctrine\ORM\Query;
//use Doctrine\ORM\QueryBuilder;

/**
 * MovieUser Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieUserRepository extends EntityRepository {

    public function findMovieUserMovie($movieId, $userId) {
        $qb = $this->createQueryBuilder('u');
        $qb
                ->where('u.movie= :id AND u.userId = :userId')
                ->setParameters(array('id' => $movieId, 'userId' => $userId))
        ;
        return $qb
                        ->getQuery()
                        ->getOneOrNullResult();
    }
    


    public function checkMovieUserList($userId) {
        $qb = $this->createQueryBuilder('u');
        $qb
                ->where('u.userId = :userId')
                ->setParameter('userId', $userId)
        ;
        return $qb
                        ->getQuery()
                        ->getArrayResult();
    }

//    public function findAllMovieUserId() {
//        $qb = $this->createQueryBuilder('u');
//        $qb
//                ->select('u.id')
//        ;
//        return $qb
//                        ->getQuery()
//                        ->getArrayResult();
//    }

    public function findAllMovieUser() {
        $qb = $this->createQueryBuilder('u');
        $qb
                ->select('u')
        ;
        return $qb
                        ->getQuery()
                        ->getResult();
    }

//    public function findRecentMovies($n, $userId, $fields) {
//
//        $qb = $this->createQueryBuilder('u');
//        $qb
//                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
//                ->select($fields)
//                ->where('u.userId= :userId')
//                ->orderBy('u.created', 'DESC')
//                ->setParameter('userId', $userId)
//                ->setFirstResult(0)
//                ->setMaxResults($n)
//        ;
//        return $qb
//                        ->getQuery()
//                        ->getResult();
//    }
    
    public function findRecentMovies($n, $userId, $locale) {

        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->select(array('m.id, m.title, m.releaseDate, m.posterPath'))
                ->where('u.userId= :userId')
                ->orderBy('u.created', 'DESC')
                ->setParameter('userId', $userId)
                ->setFirstResult(0)
                ->setMaxResults($n)
        ;
        $query = $qb->getQuery();
        $query->setHint(
                Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(TranslatableListener::HINT_TRANSLATABLE_LOCALE, $locale);
        return $query->getArrayResult();
    }

//    public function findMovieUserListAlphaOrder($userId, $fields) {
//
//        $qb = $this->createQueryBuilder('u');
//        $qb
//                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
//                ->select($fields)
//                ->where('u.userId = :userId')
//                ->setParameter('userId', $userId)
//                ->orderBy('m.title', 'ASC')
//        ;
//        return $qb
//                        ->getQuery()
//                        ->getResult();
//    }

//    public function findMovieUserListPaginator($userId, $fields, $page = 1, $maxPerPage = 3) {
//        $qb = $this->createQueryBuilder('u');
//        $qb
//                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
//                ->select($fields)
//                // ->select(array('partial m.{id,title,releaseDate,overview,posterPath}'))
//                ->where('u.userId= :userId')
//                ->orderBy('m.title', 'ASC')
//                ->setParameter('userId', $userId);
//
//        $qb->setFirstResult(($page - 1) * $maxPerPage)
//                ->setMaxResults($maxPerPage);
//
//        return new Paginator($qb, $fetchJoinCollection = false);
//    }

    public function findAllMovieUserList($userId, $locale) {
        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->select('m')
                ->join('m.genres', 'g')
                ->addSelect('g')
                ->join('m.movie_cast', 'cast')
                ->addSelect('cast')
                ->join('cast.person', 'p')
                ->addSelect('p')
                ->where('u.userId= :userId')
                ->orderBy('m.title', 'ASC')
                ->setParameter('userId', $userId);

        $query = $qb->getQuery();
        $query->setHint(
                Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(TranslatableListener::HINT_TRANSLATABLE_LOCALE, $locale);
        return $query->getArrayResult();
    }

    public function findMovieUserPageByGenre($userId, $fields, $genreId, $page = 1, $maxPerPage = 3) {

        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->join('m.genres', 'g', 'WITH', 'g.id = :genreId')
                ->select($fields)
                ->where('u.userId = :userId')
                ->setParameters(array('userId' => $userId, 'genreId' => $genreId))
                ->orderBy('m.title', 'ASC')
        ;
        $qb->setFirstResult(($page - 1) * $maxPerPage)
                ->setMaxResults($maxPerPage);

        return new Paginator($qb, $fetchJoinCollection = false);
    }

    public function findMovieUserListByGenre($userId, $fields, $genreId) {

        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->join('m.genres', 'g', 'WITH', 'g.id = :genreId')
                ->select($fields)
                ->where('u.userId = :userId')
                ->setParameters(array('userId' => $userId, 'genreId' => $genreId))
                ->orderBy('m.title', 'ASC')
        ;
        return $qb
                        ->getQuery()
                        ->getResult();
    }

    public function findMovieUserFilterByGenre($userId, $genresId, $locale) {

        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->join('m.genres', 'g')
                ->select('g.id', 'g.name')
                ->addSelect('count(m.id) as nb')
                ->where('u.userId = :userId')
                ->andWhere(($qb->expr()->in('g.id', $genresId)))
                ->setParameter('userId', $userId)
                ->groupBy('g.id')
                ->orderBy('nb', 'DESC')
        ;
        $query = $qb->getQuery();
        $query->setHint(
                Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(TranslatableListener::HINT_TRANSLATABLE_LOCALE, $locale);
        return $query->getResult();
//        return $qb
//                        ->getQuery()
//                        ->getResult();
    }

    public function findMovieUserFirstIdByGenre($userId, $genresId) {

        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->join('m.genres', 'g')
                ->select('g.id', 'g.name')
                ->addSelect('count(m.id) as nb')
                ->where('u.userId = :userId')
                ->andWhere(($qb->expr()->in('g.id', $genresId)))
                ->setParameter('userId', $userId)
                ->groupBy('g.id')
                ->orderBy('nb', 'DESC')
                ->setMaxResults(1);
        ;
        return $qb
                        ->getQuery()
                        ->getResult();
    }

    public function findMovieUserListByMedia($userId, $fields, $mediaId) {

        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->join('u.media', 'd', 'WITH', 'd.id = :mediaId')
                ->select($fields)
                ->where('u.userId = :userId')
                ->setParameters(array('userId' => $userId, 'mediaId' => $mediaId))
                ->orderBy('m.title', 'ASC')
        ;
        return $qb
                        ->getQuery()
                        ->getResult();
    }

    public function findMovieUserPageByMedia($userId, $fields, $mediaId, $page = 1, $maxPerPage = 3) {

        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->join('u.media', 'd', 'WITH', 'd.id = :mediaId')
                ->select($fields)
                ->where('u.userId = :userId')
                ->setParameters(array('userId' => $userId, 'mediaId' => $mediaId))
                ->orderBy('m.title', 'ASC')
        ;
        $qb->setFirstResult(($page - 1) * $maxPerPage)
                ->setMaxResults($maxPerPage);

        return new Paginator($qb, $fetchJoinCollection = false);
    }

    public function findMovieUserFirstIdByMedia($userId, $mediasId) {

        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->join('u.media', 'd')
                ->select('d.id', 'd.name')
                ->addSelect('count(m.id) as nb')
                ->where('u.userId = :userId')
                ->andWhere(($qb->expr()->in('d.id', $mediasId)))
                ->setParameter('userId', $userId)
                ->groupBy('d.id')
                ->orderBy('nb', 'DESC')
                ->setMaxResults(1);
        ;
        return $qb
                        ->getQuery()
                        ->getResult();
    }

    public function findMovieUserFilterByMedia($userId, $mediasId) {

        $qb = $this->createQueryBuilder('u');
        $qb
                ->join('bestophe\VideoCollectionBundle\Entity\Movie', 'm', 'WITH', 'm.id= u.movie')
                ->join('u.media', 'd')
                ->select('d.id', 'd.name')
                ->addSelect('count(m.id) as nb')
                ->where('u.userId = :userId')
                ->andWhere(($qb->expr()->in('d.id', $mediasId)))
                ->setParameter('userId', $userId)
                ->groupBy('d.id')
                ->orderBy('nb', 'DESC')
        ;
        return $qb
                        ->getQuery()
                        ->getResult();
    }

}
