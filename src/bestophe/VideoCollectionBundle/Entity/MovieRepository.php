<?php

namespace bestophe\VideoCollectionBundle\Entity;

//use Doctrine\ORM\EntityRepository;
use bestophe\VideoCollectionBundle\Entity\Translation\TranslatableRepository;
//use Doctrine\ORM\Tools\Pagination\Paginator;
//use Doctrine\Common\Collections;

/**
 * MoviesDetailsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieRepository extends TranslatableRepository {

    public function findMovie($id) {

        $qb = $this->createQueryBuilder('m');
        $qb
                ->where('m.id= :id')
                ->setParameter('id', $id)
        ;
        return $this->getOneOrNullResult($qb);
    }
    
    public function findMovieTitleInLocale($id, $locale){
        
        $qb = $this->createQueryBuilder('m');
        $qb
                ->select('m.title')
                ->where('m.id= :id')
                ->setParameter('id', $id)
        ;
        return $this->getOneOrNullResult($qb, $locale);
    }
    
    public function findAllMovieId(){
        
        $qb = $this->createQueryBuilder('m');
        $qb
                ->select('m.id')
        ;
        return $this->getResult($qb);
    }
    
    public function findAllMovies(){
        
        $qb = $this->createQueryBuilder('m');
        $qb
                ->select('m')
        ;
        return $this->getResult($qb);
    }

//    public function findRecentMovies($n, $userId) {
//
//        $qb = $this->createQueryBuilder('m');
//        $qb
//                ->join('bestophe\VideoCollectionBundle\Entity\MovieUser', 'u', 'WITH', 'm.id= u.movie')
//                //->where($qb->expr()->in('u.id', $userId))
//                ->select(array('m.id','m.title', 'm.releaseDate','m.posterPath'))
//                ->where('u.user= :userId')
//                ->orderBy('u.created', 'DESC')
//                ->setParameter('userId', $userId)
//                ->setFirstResult(0)
//                ->setMaxResults($n)
//        ;
//        return $this->getResult($qb);
//    }
    
    

//    public function findAllMovieUser($userId) {
//
//        $qb = $this->createQueryBuilder('m');
//        $qb
//                ->join('bestophe\VideoCollectionBundle\Entity\MovieUser', 'u', 'WITH', 'm.id= u.movie')
//                //->where($qb->expr()->in('u.id', $userId))
//                ->where('u.user= :userId')
//                ->setParameter('userId', $userId);
//
//        ;
//        return $this->getResult($qb);
//    }

//    public function findAllMovies($userMovies) {
//        $qb = $this->createQueryBuilder('m');
//        $qb
//                ->where($qb->expr()->in('m.id', $userMovies))
//                ->orderBy('m.title', 'ASC')
//        ;
//
//        return $qb
//                        ->getQuery()
//                        ->getResult()
//        ;
//    }

//    public function findLastAddedMovies($userMovies, $n) {
//
//        $qb = $this->createQueryBuilder('m');
//        $qb
//                ->join('bestophe\VideoCollectionBundle\Entity\MovieUserAsso', 'u', 'WITH', 'm.id= u.movie')
//                ->where($qb->expr()->in('m.id', $userMovies))
//                ->orderBy('u.created', 'DESC')
//                ->setFirstResult(0)
//                ->setMaxResults($n)
//        ;
//
//        return $qb
//                        ->getQuery()
//                        ->getResult()
//        ;
//    }

//    public function retrieveListMovies($userMovies, $page = 1, $maxperpage = 3) {
//        $qb = $this->createQueryBuilder('m');
//        $qb
//                ->where($qb->expr()->in('m.id', $userMovies))
//                ->orderBy('m.title', 'ASC');
//
//        $qb->setFirstResult(($page - 1) * $maxperpage)
//                ->setMaxResults($maxperpage);
//
//        return new Paginator($qb, $fetchJoinCollection = false);
//    }

    //    public function findOriginalMovie($id) {
//
//        $qb = $this->createQueryBuilder('m');
//        $qb
//                ->where('m.id= :id')
//                ->setParameter('id', $id)
//        ;
//                return $qb
//                        ->getQuery()
//                        ->getResult()
//        ;
//    }
}
